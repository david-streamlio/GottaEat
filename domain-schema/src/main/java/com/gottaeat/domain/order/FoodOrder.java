/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gottaeat.domain.order;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FoodOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2565647080492329845L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FoodOrder\",\"namespace\":\"com.gottaeat.domain.order\",\"fields\":[{\"name\":\"meta\",\"type\":{\"type\":\"record\",\"name\":\"FoodOrderMeta\",\"fields\":[{\"name\":\"order_id\",\"type\":\"long\"},{\"name\":\"customer_id\",\"type\":\"long\"},{\"name\":\"time_placed\",\"type\":\"string\"},{\"name\":\"order_status\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"symbols\":[\"NEW\",\"VALIDATED\",\"ACCEPTED\",\"READY\",\"DISPATCHED\",\"DELIVERED\"]}}]}},{\"name\":\"food\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FoodOrderDetail\",\"namespace\":\"com.gottaeat.domain.resturant\",\"fields\":[{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"food_item\",\"type\":{\"type\":\"record\",\"name\":\"MenuItem\",\"fields\":[{\"name\":\"item_id\",\"type\":\"long\"},{\"name\":\"item_name\",\"type\":\"string\"},{\"name\":\"item_description\",\"type\":\"string\"},{\"name\":\"customizations\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[\"\"]},{\"name\":\"price\",\"type\":\"float\"},{\"name\":\"taxable\",\"type\":\"boolean\"}]}}]}}},{\"name\":\"delivery_location\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"com.gottaeat.domain.common\",\"fields\":[{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":\"string\"},{\"name\":\"geo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LatLon\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}]}]}},{\"name\":\"payment\",\"type\":{\"type\":\"record\",\"name\":\"Payment\",\"namespace\":\"com.gottaeat.domain.payment\",\"fields\":[{\"name\":\"method_of_payment\",\"type\":{\"type\":\"record\",\"name\":\"PaymentMethod\",\"fields\":[{\"name\":\"type\",\"type\":[{\"type\":\"record\",\"name\":\"CreditCard\",\"fields\":[{\"name\":\"card_type\",\"type\":{\"type\":\"enum\",\"name\":\"CardType\",\"symbols\":[\"MASTERCARD\",\"AMEX\",\"VISA\",\"DISCOVER\"]}},{\"name\":\"account_number\",\"type\":\"string\"},{\"name\":\"billing_zip\",\"type\":\"string\"},{\"name\":\"ccv\",\"type\":\"string\"},{\"name\":\"expMonth\",\"type\":\"string\"},{\"name\":\"expYear\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"DebitCard\",\"fields\":[{\"name\":\"card_type\",\"type\":\"CardType\"},{\"name\":\"account_number\",\"type\":\"string\"},{\"name\":\"billing_zip\",\"type\":\"string\"},{\"name\":\"pin\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"ElectronicCheck\",\"fields\":[{\"name\":\"routingNumber\",\"type\":\"string\"},{\"name\":\"accountNumber\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"ApplePay\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"PayPal\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"string\"}]}]}]}},{\"name\":\"amount\",\"type\":{\"type\":\"record\",\"name\":\"PaymentAmount\",\"fields\":[{\"name\":\"food_total\",\"type\":\"float\"},{\"name\":\"tax\",\"type\":\"float\"},{\"name\":\"total\",\"type\":\"float\"}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FoodOrder> ENCODER =
      new BinaryMessageEncoder<FoodOrder>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FoodOrder> DECODER =
      new BinaryMessageDecoder<FoodOrder>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FoodOrder> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FoodOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FoodOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FoodOrder>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FoodOrder to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FoodOrder from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FoodOrder instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FoodOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.gottaeat.domain.order.FoodOrderMeta meta;
  @Deprecated public java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail> food;
  @Deprecated public com.gottaeat.domain.common.Address delivery_location;
  @Deprecated public com.gottaeat.domain.payment.Payment payment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FoodOrder() {}

  /**
   * All-args constructor.
   * @param meta The new value for meta
   * @param food The new value for food
   * @param delivery_location The new value for delivery_location
   * @param payment The new value for payment
   */
  public FoodOrder(com.gottaeat.domain.order.FoodOrderMeta meta, java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail> food, com.gottaeat.domain.common.Address delivery_location, com.gottaeat.domain.payment.Payment payment) {
    this.meta = meta;
    this.food = food;
    this.delivery_location = delivery_location;
    this.payment = payment;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return meta;
    case 1: return food;
    case 2: return delivery_location;
    case 3: return payment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: meta = (com.gottaeat.domain.order.FoodOrderMeta)value$; break;
    case 1: food = (java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail>)value$; break;
    case 2: delivery_location = (com.gottaeat.domain.common.Address)value$; break;
    case 3: payment = (com.gottaeat.domain.payment.Payment)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'meta' field.
   * @return The value of the 'meta' field.
   */
  public com.gottaeat.domain.order.FoodOrderMeta getMeta() {
    return meta;
  }


  /**
   * Sets the value of the 'meta' field.
   * @param value the value to set.
   */
  public void setMeta(com.gottaeat.domain.order.FoodOrderMeta value) {
    this.meta = value;
  }

  /**
   * Gets the value of the 'food' field.
   * @return The value of the 'food' field.
   */
  public java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail> getFood() {
    return food;
  }


  /**
   * Sets the value of the 'food' field.
   * @param value the value to set.
   */
  public void setFood(java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail> value) {
    this.food = value;
  }

  /**
   * Gets the value of the 'delivery_location' field.
   * @return The value of the 'delivery_location' field.
   */
  public com.gottaeat.domain.common.Address getDeliveryLocation() {
    return delivery_location;
  }


  /**
   * Sets the value of the 'delivery_location' field.
   * @param value the value to set.
   */
  public void setDeliveryLocation(com.gottaeat.domain.common.Address value) {
    this.delivery_location = value;
  }

  /**
   * Gets the value of the 'payment' field.
   * @return The value of the 'payment' field.
   */
  public com.gottaeat.domain.payment.Payment getPayment() {
    return payment;
  }


  /**
   * Sets the value of the 'payment' field.
   * @param value the value to set.
   */
  public void setPayment(com.gottaeat.domain.payment.Payment value) {
    this.payment = value;
  }

  /**
   * Creates a new FoodOrder RecordBuilder.
   * @return A new FoodOrder RecordBuilder
   */
  public static com.gottaeat.domain.order.FoodOrder.Builder newBuilder() {
    return new com.gottaeat.domain.order.FoodOrder.Builder();
  }

  /**
   * Creates a new FoodOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FoodOrder RecordBuilder
   */
  public static com.gottaeat.domain.order.FoodOrder.Builder newBuilder(com.gottaeat.domain.order.FoodOrder.Builder other) {
    if (other == null) {
      return new com.gottaeat.domain.order.FoodOrder.Builder();
    } else {
      return new com.gottaeat.domain.order.FoodOrder.Builder(other);
    }
  }

  /**
   * Creates a new FoodOrder RecordBuilder by copying an existing FoodOrder instance.
   * @param other The existing instance to copy.
   * @return A new FoodOrder RecordBuilder
   */
  public static com.gottaeat.domain.order.FoodOrder.Builder newBuilder(com.gottaeat.domain.order.FoodOrder other) {
    if (other == null) {
      return new com.gottaeat.domain.order.FoodOrder.Builder();
    } else {
      return new com.gottaeat.domain.order.FoodOrder.Builder(other);
    }
  }

  /**
   * RecordBuilder for FoodOrder instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FoodOrder>
    implements org.apache.avro.data.RecordBuilder<FoodOrder> {

    private com.gottaeat.domain.order.FoodOrderMeta meta;
    private com.gottaeat.domain.order.FoodOrderMeta.Builder metaBuilder;
    private java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail> food;
    private com.gottaeat.domain.common.Address delivery_location;
    private com.gottaeat.domain.common.Address.Builder delivery_locationBuilder;
    private com.gottaeat.domain.payment.Payment payment;
    private com.gottaeat.domain.payment.Payment.Builder paymentBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gottaeat.domain.order.FoodOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.meta)) {
        this.meta = data().deepCopy(fields()[0].schema(), other.meta);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasMetaBuilder()) {
        this.metaBuilder = com.gottaeat.domain.order.FoodOrderMeta.newBuilder(other.getMetaBuilder());
      }
      if (isValidValue(fields()[1], other.food)) {
        this.food = data().deepCopy(fields()[1].schema(), other.food);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.delivery_location)) {
        this.delivery_location = data().deepCopy(fields()[2].schema(), other.delivery_location);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasDeliveryLocationBuilder()) {
        this.delivery_locationBuilder = com.gottaeat.domain.common.Address.newBuilder(other.getDeliveryLocationBuilder());
      }
      if (isValidValue(fields()[3], other.payment)) {
        this.payment = data().deepCopy(fields()[3].schema(), other.payment);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasPaymentBuilder()) {
        this.paymentBuilder = com.gottaeat.domain.payment.Payment.newBuilder(other.getPaymentBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing FoodOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gottaeat.domain.order.FoodOrder other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.meta)) {
        this.meta = data().deepCopy(fields()[0].schema(), other.meta);
        fieldSetFlags()[0] = true;
      }
      this.metaBuilder = null;
      if (isValidValue(fields()[1], other.food)) {
        this.food = data().deepCopy(fields()[1].schema(), other.food);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.delivery_location)) {
        this.delivery_location = data().deepCopy(fields()[2].schema(), other.delivery_location);
        fieldSetFlags()[2] = true;
      }
      this.delivery_locationBuilder = null;
      if (isValidValue(fields()[3], other.payment)) {
        this.payment = data().deepCopy(fields()[3].schema(), other.payment);
        fieldSetFlags()[3] = true;
      }
      this.paymentBuilder = null;
    }

    /**
      * Gets the value of the 'meta' field.
      * @return The value.
      */
    public com.gottaeat.domain.order.FoodOrderMeta getMeta() {
      return meta;
    }


    /**
      * Sets the value of the 'meta' field.
      * @param value The value of 'meta'.
      * @return This builder.
      */
    public com.gottaeat.domain.order.FoodOrder.Builder setMeta(com.gottaeat.domain.order.FoodOrderMeta value) {
      validate(fields()[0], value);
      this.metaBuilder = null;
      this.meta = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'meta' field has been set.
      * @return True if the 'meta' field has been set, false otherwise.
      */
    public boolean hasMeta() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'meta' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.gottaeat.domain.order.FoodOrderMeta.Builder getMetaBuilder() {
      if (metaBuilder == null) {
        if (hasMeta()) {
          setMetaBuilder(com.gottaeat.domain.order.FoodOrderMeta.newBuilder(meta));
        } else {
          setMetaBuilder(com.gottaeat.domain.order.FoodOrderMeta.newBuilder());
        }
      }
      return metaBuilder;
    }

    /**
     * Sets the Builder instance for the 'meta' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.gottaeat.domain.order.FoodOrder.Builder setMetaBuilder(com.gottaeat.domain.order.FoodOrderMeta.Builder value) {
      clearMeta();
      metaBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'meta' field has an active Builder instance
     * @return True if the 'meta' field has an active Builder instance
     */
    public boolean hasMetaBuilder() {
      return metaBuilder != null;
    }

    /**
      * Clears the value of the 'meta' field.
      * @return This builder.
      */
    public com.gottaeat.domain.order.FoodOrder.Builder clearMeta() {
      meta = null;
      metaBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'food' field.
      * @return The value.
      */
    public java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail> getFood() {
      return food;
    }


    /**
      * Sets the value of the 'food' field.
      * @param value The value of 'food'.
      * @return This builder.
      */
    public com.gottaeat.domain.order.FoodOrder.Builder setFood(java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail> value) {
      validate(fields()[1], value);
      this.food = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'food' field has been set.
      * @return True if the 'food' field has been set, false otherwise.
      */
    public boolean hasFood() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'food' field.
      * @return This builder.
      */
    public com.gottaeat.domain.order.FoodOrder.Builder clearFood() {
      food = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'delivery_location' field.
      * @return The value.
      */
    public com.gottaeat.domain.common.Address getDeliveryLocation() {
      return delivery_location;
    }


    /**
      * Sets the value of the 'delivery_location' field.
      * @param value The value of 'delivery_location'.
      * @return This builder.
      */
    public com.gottaeat.domain.order.FoodOrder.Builder setDeliveryLocation(com.gottaeat.domain.common.Address value) {
      validate(fields()[2], value);
      this.delivery_locationBuilder = null;
      this.delivery_location = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'delivery_location' field has been set.
      * @return True if the 'delivery_location' field has been set, false otherwise.
      */
    public boolean hasDeliveryLocation() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'delivery_location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.gottaeat.domain.common.Address.Builder getDeliveryLocationBuilder() {
      if (delivery_locationBuilder == null) {
        if (hasDeliveryLocation()) {
          setDeliveryLocationBuilder(com.gottaeat.domain.common.Address.newBuilder(delivery_location));
        } else {
          setDeliveryLocationBuilder(com.gottaeat.domain.common.Address.newBuilder());
        }
      }
      return delivery_locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'delivery_location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.gottaeat.domain.order.FoodOrder.Builder setDeliveryLocationBuilder(com.gottaeat.domain.common.Address.Builder value) {
      clearDeliveryLocation();
      delivery_locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'delivery_location' field has an active Builder instance
     * @return True if the 'delivery_location' field has an active Builder instance
     */
    public boolean hasDeliveryLocationBuilder() {
      return delivery_locationBuilder != null;
    }

    /**
      * Clears the value of the 'delivery_location' field.
      * @return This builder.
      */
    public com.gottaeat.domain.order.FoodOrder.Builder clearDeliveryLocation() {
      delivery_location = null;
      delivery_locationBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment' field.
      * @return The value.
      */
    public com.gottaeat.domain.payment.Payment getPayment() {
      return payment;
    }


    /**
      * Sets the value of the 'payment' field.
      * @param value The value of 'payment'.
      * @return This builder.
      */
    public com.gottaeat.domain.order.FoodOrder.Builder setPayment(com.gottaeat.domain.payment.Payment value) {
      validate(fields()[3], value);
      this.paymentBuilder = null;
      this.payment = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payment' field has been set.
      * @return True if the 'payment' field has been set, false otherwise.
      */
    public boolean hasPayment() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'payment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.gottaeat.domain.payment.Payment.Builder getPaymentBuilder() {
      if (paymentBuilder == null) {
        if (hasPayment()) {
          setPaymentBuilder(com.gottaeat.domain.payment.Payment.newBuilder(payment));
        } else {
          setPaymentBuilder(com.gottaeat.domain.payment.Payment.newBuilder());
        }
      }
      return paymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'payment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.gottaeat.domain.order.FoodOrder.Builder setPaymentBuilder(com.gottaeat.domain.payment.Payment.Builder value) {
      clearPayment();
      paymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payment' field has an active Builder instance
     * @return True if the 'payment' field has an active Builder instance
     */
    public boolean hasPaymentBuilder() {
      return paymentBuilder != null;
    }

    /**
      * Clears the value of the 'payment' field.
      * @return This builder.
      */
    public com.gottaeat.domain.order.FoodOrder.Builder clearPayment() {
      payment = null;
      paymentBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FoodOrder build() {
      try {
        FoodOrder record = new FoodOrder();
        if (metaBuilder != null) {
          try {
            record.meta = this.metaBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("meta"));
            throw e;
          }
        } else {
          record.meta = fieldSetFlags()[0] ? this.meta : (com.gottaeat.domain.order.FoodOrderMeta) defaultValue(fields()[0]);
        }
        record.food = fieldSetFlags()[1] ? this.food : (java.util.List<com.gottaeat.domain.resturant.FoodOrderDetail>) defaultValue(fields()[1]);
        if (delivery_locationBuilder != null) {
          try {
            record.delivery_location = this.delivery_locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("delivery_location"));
            throw e;
          }
        } else {
          record.delivery_location = fieldSetFlags()[2] ? this.delivery_location : (com.gottaeat.domain.common.Address) defaultValue(fields()[2]);
        }
        if (paymentBuilder != null) {
          try {
            record.payment = this.paymentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payment"));
            throw e;
          }
        } else {
          record.payment = fieldSetFlags()[3] ? this.payment : (com.gottaeat.domain.payment.Payment) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FoodOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<FoodOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FoodOrder>
    READER$ = (org.apache.avro.io.DatumReader<FoodOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










