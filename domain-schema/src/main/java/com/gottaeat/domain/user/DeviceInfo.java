/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gottaeat.domain.user;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DeviceInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1697181425755856867L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeviceInfo\",\"namespace\":\"com.gottaeat.domain.user\",\"fields\":[{\"name\":\"registeredUserId\",\"type\":\"int\"},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LatLon\",\"namespace\":\"com.gottaeat.domain.geography\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}]},{\"name\":\"globalIPv4\",\"type\":[\"null\",\"string\"]},{\"name\":\"globalIPv6\",\"type\":[\"null\",\"string\"]},{\"name\":\"deviceId\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeviceInfo> ENCODER =
      new BinaryMessageEncoder<DeviceInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeviceInfo> DECODER =
      new BinaryMessageDecoder<DeviceInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DeviceInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DeviceInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DeviceInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DeviceInfo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DeviceInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DeviceInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DeviceInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DeviceInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int registeredUserId;
  @Deprecated public com.gottaeat.domain.geography.LatLon location;
  @Deprecated public java.lang.CharSequence globalIPv4;
  @Deprecated public java.lang.CharSequence globalIPv6;
  @Deprecated public java.lang.CharSequence deviceId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeviceInfo() {}

  /**
   * All-args constructor.
   * @param registeredUserId The new value for registeredUserId
   * @param location The new value for location
   * @param globalIPv4 The new value for globalIPv4
   * @param globalIPv6 The new value for globalIPv6
   * @param deviceId The new value for deviceId
   */
  public DeviceInfo(java.lang.Integer registeredUserId, com.gottaeat.domain.geography.LatLon location, java.lang.CharSequence globalIPv4, java.lang.CharSequence globalIPv6, java.lang.CharSequence deviceId) {
    this.registeredUserId = registeredUserId;
    this.location = location;
    this.globalIPv4 = globalIPv4;
    this.globalIPv6 = globalIPv6;
    this.deviceId = deviceId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return registeredUserId;
    case 1: return location;
    case 2: return globalIPv4;
    case 3: return globalIPv6;
    case 4: return deviceId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: registeredUserId = (java.lang.Integer)value$; break;
    case 1: location = (com.gottaeat.domain.geography.LatLon)value$; break;
    case 2: globalIPv4 = (java.lang.CharSequence)value$; break;
    case 3: globalIPv6 = (java.lang.CharSequence)value$; break;
    case 4: deviceId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'registeredUserId' field.
   * @return The value of the 'registeredUserId' field.
   */
  public int getRegisteredUserId() {
    return registeredUserId;
  }


  /**
   * Sets the value of the 'registeredUserId' field.
   * @param value the value to set.
   */
  public void setRegisteredUserId(int value) {
    this.registeredUserId = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public com.gottaeat.domain.geography.LatLon getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(com.gottaeat.domain.geography.LatLon value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'globalIPv4' field.
   * @return The value of the 'globalIPv4' field.
   */
  public java.lang.CharSequence getGlobalIPv4() {
    return globalIPv4;
  }


  /**
   * Sets the value of the 'globalIPv4' field.
   * @param value the value to set.
   */
  public void setGlobalIPv4(java.lang.CharSequence value) {
    this.globalIPv4 = value;
  }

  /**
   * Gets the value of the 'globalIPv6' field.
   * @return The value of the 'globalIPv6' field.
   */
  public java.lang.CharSequence getGlobalIPv6() {
    return globalIPv6;
  }


  /**
   * Sets the value of the 'globalIPv6' field.
   * @param value the value to set.
   */
  public void setGlobalIPv6(java.lang.CharSequence value) {
    this.globalIPv6 = value;
  }

  /**
   * Gets the value of the 'deviceId' field.
   * @return The value of the 'deviceId' field.
   */
  public java.lang.CharSequence getDeviceId() {
    return deviceId;
  }


  /**
   * Sets the value of the 'deviceId' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.deviceId = value;
  }

  /**
   * Creates a new DeviceInfo RecordBuilder.
   * @return A new DeviceInfo RecordBuilder
   */
  public static com.gottaeat.domain.user.DeviceInfo.Builder newBuilder() {
    return new com.gottaeat.domain.user.DeviceInfo.Builder();
  }

  /**
   * Creates a new DeviceInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeviceInfo RecordBuilder
   */
  public static com.gottaeat.domain.user.DeviceInfo.Builder newBuilder(com.gottaeat.domain.user.DeviceInfo.Builder other) {
    if (other == null) {
      return new com.gottaeat.domain.user.DeviceInfo.Builder();
    } else {
      return new com.gottaeat.domain.user.DeviceInfo.Builder(other);
    }
  }

  /**
   * Creates a new DeviceInfo RecordBuilder by copying an existing DeviceInfo instance.
   * @param other The existing instance to copy.
   * @return A new DeviceInfo RecordBuilder
   */
  public static com.gottaeat.domain.user.DeviceInfo.Builder newBuilder(com.gottaeat.domain.user.DeviceInfo other) {
    if (other == null) {
      return new com.gottaeat.domain.user.DeviceInfo.Builder();
    } else {
      return new com.gottaeat.domain.user.DeviceInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for DeviceInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeviceInfo>
    implements org.apache.avro.data.RecordBuilder<DeviceInfo> {

    private int registeredUserId;
    private com.gottaeat.domain.geography.LatLon location;
    private com.gottaeat.domain.geography.LatLon.Builder locationBuilder;
    private java.lang.CharSequence globalIPv4;
    private java.lang.CharSequence globalIPv6;
    private java.lang.CharSequence deviceId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gottaeat.domain.user.DeviceInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.registeredUserId)) {
        this.registeredUserId = data().deepCopy(fields()[0].schema(), other.registeredUserId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = com.gottaeat.domain.geography.LatLon.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[2], other.globalIPv4)) {
        this.globalIPv4 = data().deepCopy(fields()[2].schema(), other.globalIPv4);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.globalIPv6)) {
        this.globalIPv6 = data().deepCopy(fields()[3].schema(), other.globalIPv6);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[4].schema(), other.deviceId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing DeviceInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gottaeat.domain.user.DeviceInfo other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.registeredUserId)) {
        this.registeredUserId = data().deepCopy(fields()[0].schema(), other.registeredUserId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[2], other.globalIPv4)) {
        this.globalIPv4 = data().deepCopy(fields()[2].schema(), other.globalIPv4);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.globalIPv6)) {
        this.globalIPv6 = data().deepCopy(fields()[3].schema(), other.globalIPv6);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[4].schema(), other.deviceId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'registeredUserId' field.
      * @return The value.
      */
    public int getRegisteredUserId() {
      return registeredUserId;
    }


    /**
      * Sets the value of the 'registeredUserId' field.
      * @param value The value of 'registeredUserId'.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder setRegisteredUserId(int value) {
      validate(fields()[0], value);
      this.registeredUserId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'registeredUserId' field has been set.
      * @return True if the 'registeredUserId' field has been set, false otherwise.
      */
    public boolean hasRegisteredUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'registeredUserId' field.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder clearRegisteredUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public com.gottaeat.domain.geography.LatLon getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder setLocation(com.gottaeat.domain.geography.LatLon value) {
      validate(fields()[1], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.gottaeat.domain.geography.LatLon.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(com.gottaeat.domain.geography.LatLon.newBuilder(location));
        } else {
          setLocationBuilder(com.gottaeat.domain.geography.LatLon.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.gottaeat.domain.user.DeviceInfo.Builder setLocationBuilder(com.gottaeat.domain.geography.LatLon.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'globalIPv4' field.
      * @return The value.
      */
    public java.lang.CharSequence getGlobalIPv4() {
      return globalIPv4;
    }


    /**
      * Sets the value of the 'globalIPv4' field.
      * @param value The value of 'globalIPv4'.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder setGlobalIPv4(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.globalIPv4 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'globalIPv4' field has been set.
      * @return True if the 'globalIPv4' field has been set, false otherwise.
      */
    public boolean hasGlobalIPv4() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'globalIPv4' field.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder clearGlobalIPv4() {
      globalIPv4 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'globalIPv6' field.
      * @return The value.
      */
    public java.lang.CharSequence getGlobalIPv6() {
      return globalIPv6;
    }


    /**
      * Sets the value of the 'globalIPv6' field.
      * @param value The value of 'globalIPv6'.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder setGlobalIPv6(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.globalIPv6 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'globalIPv6' field has been set.
      * @return True if the 'globalIPv6' field has been set, false otherwise.
      */
    public boolean hasGlobalIPv6() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'globalIPv6' field.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder clearGlobalIPv6() {
      globalIPv6 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return deviceId;
    }


    /**
      * Sets the value of the 'deviceId' field.
      * @param value The value of 'deviceId'.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.deviceId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceId' field has been set.
      * @return True if the 'deviceId' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'deviceId' field.
      * @return This builder.
      */
    public com.gottaeat.domain.user.DeviceInfo.Builder clearDeviceId() {
      deviceId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeviceInfo build() {
      try {
        DeviceInfo record = new DeviceInfo();
        record.registeredUserId = fieldSetFlags()[0] ? this.registeredUserId : (java.lang.Integer) defaultValue(fields()[0]);
        if (locationBuilder != null) {
          try {
            record.location = this.locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("location"));
            throw e;
          }
        } else {
          record.location = fieldSetFlags()[1] ? this.location : (com.gottaeat.domain.geography.LatLon) defaultValue(fields()[1]);
        }
        record.globalIPv4 = fieldSetFlags()[2] ? this.globalIPv4 : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.globalIPv6 = fieldSetFlags()[3] ? this.globalIPv6 : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.deviceId = fieldSetFlags()[4] ? this.deviceId : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeviceInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeviceInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeviceInfo>
    READER$ = (org.apache.avro.io.DatumReader<DeviceInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.registeredUserId);

    if (this.location == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.location.customEncode(out);
    }

    if (this.globalIPv4 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.globalIPv4);
    }

    if (this.globalIPv6 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.globalIPv6);
    }

    if (this.deviceId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.deviceId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.registeredUserId = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.location = null;
      } else {
        if (this.location == null) {
          this.location = new com.gottaeat.domain.geography.LatLon();
        }
        this.location.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.globalIPv4 = null;
      } else {
        this.globalIPv4 = in.readString(this.globalIPv4 instanceof Utf8 ? (Utf8)this.globalIPv4 : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.globalIPv6 = null;
      } else {
        this.globalIPv6 = in.readString(this.globalIPv6 instanceof Utf8 ? (Utf8)this.globalIPv6 : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.deviceId = null;
      } else {
        this.deviceId = in.readString(this.deviceId instanceof Utf8 ? (Utf8)this.deviceId : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.registeredUserId = in.readInt();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.location = null;
          } else {
            if (this.location == null) {
              this.location = new com.gottaeat.domain.geography.LatLon();
            }
            this.location.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.globalIPv4 = null;
          } else {
            this.globalIPv4 = in.readString(this.globalIPv4 instanceof Utf8 ? (Utf8)this.globalIPv4 : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.globalIPv6 = null;
          } else {
            this.globalIPv6 = in.readString(this.globalIPv6 instanceof Utf8 ? (Utf8)this.globalIPv6 : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.deviceId = null;
          } else {
            this.deviceId = in.readString(this.deviceId instanceof Utf8 ? (Utf8)this.deviceId : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










