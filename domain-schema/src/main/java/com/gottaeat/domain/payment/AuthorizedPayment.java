/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gottaeat.domain.payment;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuthorizedPayment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1590379518803796773L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuthorizedPayment\",\"namespace\":\"com.gottaeat.domain.payment\",\"fields\":[{\"name\":\"payment\",\"type\":{\"type\":\"record\",\"name\":\"Payment\",\"fields\":[{\"name\":\"method_of_payment\",\"type\":{\"type\":\"record\",\"name\":\"PaymentMethod\",\"fields\":[{\"name\":\"type\",\"type\":[{\"type\":\"record\",\"name\":\"CreditCard\",\"fields\":[{\"name\":\"card_type\",\"type\":{\"type\":\"enum\",\"name\":\"CardType\",\"symbols\":[\"MASTERCARD\",\"AMEX\",\"VISA\",\"DISCOVER\"]}},{\"name\":\"account_number\",\"type\":\"string\"},{\"name\":\"billing_zip\",\"type\":\"string\"},{\"name\":\"ccv\",\"type\":\"string\"},{\"name\":\"expMonth\",\"type\":\"string\"},{\"name\":\"expYear\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"DebitCard\",\"fields\":[{\"name\":\"card_type\",\"type\":\"CardType\"},{\"name\":\"account_number\",\"type\":\"string\"},{\"name\":\"billing_zip\",\"type\":\"string\"},{\"name\":\"pin\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"ElectronicCheck\",\"fields\":[{\"name\":\"routingNumber\",\"type\":\"string\"},{\"name\":\"accountNumber\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"ApplePay\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"PayPal\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"string\"}]}]}]}},{\"name\":\"amount\",\"type\":{\"type\":\"record\",\"name\":\"PaymentAmount\",\"fields\":[{\"name\":\"food_total\",\"type\":\"float\"},{\"name\":\"tax\",\"type\":\"float\"},{\"name\":\"total\",\"type\":\"float\"}]}}]}},{\"name\":\"approvalCode\",\"type\":\"string\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentStatus\",\"symbols\":[\"AUTHORIZED\",\"CAPTURED\",\"SETTLED\",\"REJECTED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AuthorizedPayment> ENCODER =
      new BinaryMessageEncoder<AuthorizedPayment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuthorizedPayment> DECODER =
      new BinaryMessageDecoder<AuthorizedPayment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuthorizedPayment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuthorizedPayment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuthorizedPayment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AuthorizedPayment>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuthorizedPayment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuthorizedPayment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuthorizedPayment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AuthorizedPayment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.gottaeat.domain.payment.Payment payment;
  @Deprecated public java.lang.CharSequence approvalCode;
  @Deprecated public com.gottaeat.domain.payment.PaymentStatus status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuthorizedPayment() {}

  /**
   * All-args constructor.
   * @param payment The new value for payment
   * @param approvalCode The new value for approvalCode
   * @param status The new value for status
   */
  public AuthorizedPayment(com.gottaeat.domain.payment.Payment payment, java.lang.CharSequence approvalCode, com.gottaeat.domain.payment.PaymentStatus status) {
    this.payment = payment;
    this.approvalCode = approvalCode;
    this.status = status;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return payment;
    case 1: return approvalCode;
    case 2: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: payment = (com.gottaeat.domain.payment.Payment)value$; break;
    case 1: approvalCode = (java.lang.CharSequence)value$; break;
    case 2: status = (com.gottaeat.domain.payment.PaymentStatus)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'payment' field.
   * @return The value of the 'payment' field.
   */
  public com.gottaeat.domain.payment.Payment getPayment() {
    return payment;
  }


  /**
   * Sets the value of the 'payment' field.
   * @param value the value to set.
   */
  public void setPayment(com.gottaeat.domain.payment.Payment value) {
    this.payment = value;
  }

  /**
   * Gets the value of the 'approvalCode' field.
   * @return The value of the 'approvalCode' field.
   */
  public java.lang.CharSequence getApprovalCode() {
    return approvalCode;
  }


  /**
   * Sets the value of the 'approvalCode' field.
   * @param value the value to set.
   */
  public void setApprovalCode(java.lang.CharSequence value) {
    this.approvalCode = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.gottaeat.domain.payment.PaymentStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.gottaeat.domain.payment.PaymentStatus value) {
    this.status = value;
  }

  /**
   * Creates a new AuthorizedPayment RecordBuilder.
   * @return A new AuthorizedPayment RecordBuilder
   */
  public static com.gottaeat.domain.payment.AuthorizedPayment.Builder newBuilder() {
    return new com.gottaeat.domain.payment.AuthorizedPayment.Builder();
  }

  /**
   * Creates a new AuthorizedPayment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuthorizedPayment RecordBuilder
   */
  public static com.gottaeat.domain.payment.AuthorizedPayment.Builder newBuilder(com.gottaeat.domain.payment.AuthorizedPayment.Builder other) {
    if (other == null) {
      return new com.gottaeat.domain.payment.AuthorizedPayment.Builder();
    } else {
      return new com.gottaeat.domain.payment.AuthorizedPayment.Builder(other);
    }
  }

  /**
   * Creates a new AuthorizedPayment RecordBuilder by copying an existing AuthorizedPayment instance.
   * @param other The existing instance to copy.
   * @return A new AuthorizedPayment RecordBuilder
   */
  public static com.gottaeat.domain.payment.AuthorizedPayment.Builder newBuilder(com.gottaeat.domain.payment.AuthorizedPayment other) {
    if (other == null) {
      return new com.gottaeat.domain.payment.AuthorizedPayment.Builder();
    } else {
      return new com.gottaeat.domain.payment.AuthorizedPayment.Builder(other);
    }
  }

  /**
   * RecordBuilder for AuthorizedPayment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuthorizedPayment>
    implements org.apache.avro.data.RecordBuilder<AuthorizedPayment> {

    private com.gottaeat.domain.payment.Payment payment;
    private com.gottaeat.domain.payment.Payment.Builder paymentBuilder;
    private java.lang.CharSequence approvalCode;
    private com.gottaeat.domain.payment.PaymentStatus status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gottaeat.domain.payment.AuthorizedPayment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.payment)) {
        this.payment = data().deepCopy(fields()[0].schema(), other.payment);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasPaymentBuilder()) {
        this.paymentBuilder = com.gottaeat.domain.payment.Payment.newBuilder(other.getPaymentBuilder());
      }
      if (isValidValue(fields()[1], other.approvalCode)) {
        this.approvalCode = data().deepCopy(fields()[1].schema(), other.approvalCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AuthorizedPayment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gottaeat.domain.payment.AuthorizedPayment other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.payment)) {
        this.payment = data().deepCopy(fields()[0].schema(), other.payment);
        fieldSetFlags()[0] = true;
      }
      this.paymentBuilder = null;
      if (isValidValue(fields()[1], other.approvalCode)) {
        this.approvalCode = data().deepCopy(fields()[1].schema(), other.approvalCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'payment' field.
      * @return The value.
      */
    public com.gottaeat.domain.payment.Payment getPayment() {
      return payment;
    }


    /**
      * Sets the value of the 'payment' field.
      * @param value The value of 'payment'.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.AuthorizedPayment.Builder setPayment(com.gottaeat.domain.payment.Payment value) {
      validate(fields()[0], value);
      this.paymentBuilder = null;
      this.payment = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'payment' field has been set.
      * @return True if the 'payment' field has been set, false otherwise.
      */
    public boolean hasPayment() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'payment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.gottaeat.domain.payment.Payment.Builder getPaymentBuilder() {
      if (paymentBuilder == null) {
        if (hasPayment()) {
          setPaymentBuilder(com.gottaeat.domain.payment.Payment.newBuilder(payment));
        } else {
          setPaymentBuilder(com.gottaeat.domain.payment.Payment.newBuilder());
        }
      }
      return paymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'payment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.gottaeat.domain.payment.AuthorizedPayment.Builder setPaymentBuilder(com.gottaeat.domain.payment.Payment.Builder value) {
      clearPayment();
      paymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payment' field has an active Builder instance
     * @return True if the 'payment' field has an active Builder instance
     */
    public boolean hasPaymentBuilder() {
      return paymentBuilder != null;
    }

    /**
      * Clears the value of the 'payment' field.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.AuthorizedPayment.Builder clearPayment() {
      payment = null;
      paymentBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'approvalCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getApprovalCode() {
      return approvalCode;
    }


    /**
      * Sets the value of the 'approvalCode' field.
      * @param value The value of 'approvalCode'.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.AuthorizedPayment.Builder setApprovalCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.approvalCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'approvalCode' field has been set.
      * @return True if the 'approvalCode' field has been set, false otherwise.
      */
    public boolean hasApprovalCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'approvalCode' field.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.AuthorizedPayment.Builder clearApprovalCode() {
      approvalCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.gottaeat.domain.payment.PaymentStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.AuthorizedPayment.Builder setStatus(com.gottaeat.domain.payment.PaymentStatus value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.AuthorizedPayment.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuthorizedPayment build() {
      try {
        AuthorizedPayment record = new AuthorizedPayment();
        if (paymentBuilder != null) {
          try {
            record.payment = this.paymentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payment"));
            throw e;
          }
        } else {
          record.payment = fieldSetFlags()[0] ? this.payment : (com.gottaeat.domain.payment.Payment) defaultValue(fields()[0]);
        }
        record.approvalCode = fieldSetFlags()[1] ? this.approvalCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (com.gottaeat.domain.payment.PaymentStatus) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuthorizedPayment>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuthorizedPayment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuthorizedPayment>
    READER$ = (org.apache.avro.io.DatumReader<AuthorizedPayment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










