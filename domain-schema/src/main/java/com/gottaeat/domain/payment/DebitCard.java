/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gottaeat.domain.payment;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DebitCard extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8014312236332924126L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DebitCard\",\"namespace\":\"com.gottaeat.domain.payment\",\"fields\":[{\"name\":\"card_type\",\"type\":{\"type\":\"enum\",\"name\":\"CardType\",\"symbols\":[\"MASTERCARD\",\"AMEX\",\"VISA\",\"DISCOVER\"]}},{\"name\":\"account_number\",\"type\":\"string\"},{\"name\":\"billing_zip\",\"type\":\"string\"},{\"name\":\"pin\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DebitCard> ENCODER =
      new BinaryMessageEncoder<DebitCard>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DebitCard> DECODER =
      new BinaryMessageDecoder<DebitCard>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DebitCard> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DebitCard> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DebitCard> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DebitCard>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DebitCard to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DebitCard from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DebitCard instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DebitCard fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.gottaeat.domain.payment.CardType card_type;
  @Deprecated public java.lang.CharSequence account_number;
  @Deprecated public java.lang.CharSequence billing_zip;
  @Deprecated public java.lang.CharSequence pin;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DebitCard() {}

  /**
   * All-args constructor.
   * @param card_type The new value for card_type
   * @param account_number The new value for account_number
   * @param billing_zip The new value for billing_zip
   * @param pin The new value for pin
   */
  public DebitCard(com.gottaeat.domain.payment.CardType card_type, java.lang.CharSequence account_number, java.lang.CharSequence billing_zip, java.lang.CharSequence pin) {
    this.card_type = card_type;
    this.account_number = account_number;
    this.billing_zip = billing_zip;
    this.pin = pin;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return card_type;
    case 1: return account_number;
    case 2: return billing_zip;
    case 3: return pin;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: card_type = (com.gottaeat.domain.payment.CardType)value$; break;
    case 1: account_number = (java.lang.CharSequence)value$; break;
    case 2: billing_zip = (java.lang.CharSequence)value$; break;
    case 3: pin = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'card_type' field.
   * @return The value of the 'card_type' field.
   */
  public com.gottaeat.domain.payment.CardType getCardType() {
    return card_type;
  }


  /**
   * Sets the value of the 'card_type' field.
   * @param value the value to set.
   */
  public void setCardType(com.gottaeat.domain.payment.CardType value) {
    this.card_type = value;
  }

  /**
   * Gets the value of the 'account_number' field.
   * @return The value of the 'account_number' field.
   */
  public java.lang.CharSequence getAccountNumber() {
    return account_number;
  }


  /**
   * Sets the value of the 'account_number' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.CharSequence value) {
    this.account_number = value;
  }

  /**
   * Gets the value of the 'billing_zip' field.
   * @return The value of the 'billing_zip' field.
   */
  public java.lang.CharSequence getBillingZip() {
    return billing_zip;
  }


  /**
   * Sets the value of the 'billing_zip' field.
   * @param value the value to set.
   */
  public void setBillingZip(java.lang.CharSequence value) {
    this.billing_zip = value;
  }

  /**
   * Gets the value of the 'pin' field.
   * @return The value of the 'pin' field.
   */
  public java.lang.CharSequence getPin() {
    return pin;
  }


  /**
   * Sets the value of the 'pin' field.
   * @param value the value to set.
   */
  public void setPin(java.lang.CharSequence value) {
    this.pin = value;
  }

  /**
   * Creates a new DebitCard RecordBuilder.
   * @return A new DebitCard RecordBuilder
   */
  public static com.gottaeat.domain.payment.DebitCard.Builder newBuilder() {
    return new com.gottaeat.domain.payment.DebitCard.Builder();
  }

  /**
   * Creates a new DebitCard RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DebitCard RecordBuilder
   */
  public static com.gottaeat.domain.payment.DebitCard.Builder newBuilder(com.gottaeat.domain.payment.DebitCard.Builder other) {
    if (other == null) {
      return new com.gottaeat.domain.payment.DebitCard.Builder();
    } else {
      return new com.gottaeat.domain.payment.DebitCard.Builder(other);
    }
  }

  /**
   * Creates a new DebitCard RecordBuilder by copying an existing DebitCard instance.
   * @param other The existing instance to copy.
   * @return A new DebitCard RecordBuilder
   */
  public static com.gottaeat.domain.payment.DebitCard.Builder newBuilder(com.gottaeat.domain.payment.DebitCard other) {
    if (other == null) {
      return new com.gottaeat.domain.payment.DebitCard.Builder();
    } else {
      return new com.gottaeat.domain.payment.DebitCard.Builder(other);
    }
  }

  /**
   * RecordBuilder for DebitCard instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DebitCard>
    implements org.apache.avro.data.RecordBuilder<DebitCard> {

    private com.gottaeat.domain.payment.CardType card_type;
    private java.lang.CharSequence account_number;
    private java.lang.CharSequence billing_zip;
    private java.lang.CharSequence pin;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gottaeat.domain.payment.DebitCard.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.card_type)) {
        this.card_type = data().deepCopy(fields()[0].schema(), other.card_type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.account_number)) {
        this.account_number = data().deepCopy(fields()[1].schema(), other.account_number);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.billing_zip)) {
        this.billing_zip = data().deepCopy(fields()[2].schema(), other.billing_zip);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pin)) {
        this.pin = data().deepCopy(fields()[3].schema(), other.pin);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing DebitCard instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gottaeat.domain.payment.DebitCard other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.card_type)) {
        this.card_type = data().deepCopy(fields()[0].schema(), other.card_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.account_number)) {
        this.account_number = data().deepCopy(fields()[1].schema(), other.account_number);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.billing_zip)) {
        this.billing_zip = data().deepCopy(fields()[2].schema(), other.billing_zip);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pin)) {
        this.pin = data().deepCopy(fields()[3].schema(), other.pin);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'card_type' field.
      * @return The value.
      */
    public com.gottaeat.domain.payment.CardType getCardType() {
      return card_type;
    }


    /**
      * Sets the value of the 'card_type' field.
      * @param value The value of 'card_type'.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.DebitCard.Builder setCardType(com.gottaeat.domain.payment.CardType value) {
      validate(fields()[0], value);
      this.card_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'card_type' field has been set.
      * @return True if the 'card_type' field has been set, false otherwise.
      */
    public boolean hasCardType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'card_type' field.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.DebitCard.Builder clearCardType() {
      card_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'account_number' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountNumber() {
      return account_number;
    }


    /**
      * Sets the value of the 'account_number' field.
      * @param value The value of 'account_number'.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.DebitCard.Builder setAccountNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.account_number = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'account_number' field has been set.
      * @return True if the 'account_number' field has been set, false otherwise.
      */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'account_number' field.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.DebitCard.Builder clearAccountNumber() {
      account_number = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'billing_zip' field.
      * @return The value.
      */
    public java.lang.CharSequence getBillingZip() {
      return billing_zip;
    }


    /**
      * Sets the value of the 'billing_zip' field.
      * @param value The value of 'billing_zip'.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.DebitCard.Builder setBillingZip(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.billing_zip = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'billing_zip' field has been set.
      * @return True if the 'billing_zip' field has been set, false otherwise.
      */
    public boolean hasBillingZip() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'billing_zip' field.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.DebitCard.Builder clearBillingZip() {
      billing_zip = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pin' field.
      * @return The value.
      */
    public java.lang.CharSequence getPin() {
      return pin;
    }


    /**
      * Sets the value of the 'pin' field.
      * @param value The value of 'pin'.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.DebitCard.Builder setPin(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.pin = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pin' field has been set.
      * @return True if the 'pin' field has been set, false otherwise.
      */
    public boolean hasPin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pin' field.
      * @return This builder.
      */
    public com.gottaeat.domain.payment.DebitCard.Builder clearPin() {
      pin = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DebitCard build() {
      try {
        DebitCard record = new DebitCard();
        record.card_type = fieldSetFlags()[0] ? this.card_type : (com.gottaeat.domain.payment.CardType) defaultValue(fields()[0]);
        record.account_number = fieldSetFlags()[1] ? this.account_number : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.billing_zip = fieldSetFlags()[2] ? this.billing_zip : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.pin = fieldSetFlags()[3] ? this.pin : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DebitCard>
    WRITER$ = (org.apache.avro.io.DatumWriter<DebitCard>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DebitCard>
    READER$ = (org.apache.avro.io.DatumReader<DebitCard>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.card_type.ordinal());

    out.writeString(this.account_number);

    out.writeString(this.billing_zip);

    out.writeString(this.pin);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.card_type = com.gottaeat.domain.payment.CardType.values()[in.readEnum()];

      this.account_number = in.readString(this.account_number instanceof Utf8 ? (Utf8)this.account_number : null);

      this.billing_zip = in.readString(this.billing_zip instanceof Utf8 ? (Utf8)this.billing_zip : null);

      this.pin = in.readString(this.pin instanceof Utf8 ? (Utf8)this.pin : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.card_type = com.gottaeat.domain.payment.CardType.values()[in.readEnum()];
          break;

        case 1:
          this.account_number = in.readString(this.account_number instanceof Utf8 ? (Utf8)this.account_number : null);
          break;

        case 2:
          this.billing_zip = in.readString(this.billing_zip instanceof Utf8 ? (Utf8)this.billing_zip : null);
          break;

        case 3:
          this.pin = in.readString(this.pin instanceof Utf8 ? (Utf8)this.pin : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










